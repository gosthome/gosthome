// Code generated by go-enum DO NOT EDIT.
// Version:
// Revision:
// Build Date:
// Built By:

package component

import (
	"errors"
	"fmt"
)

const (
	// InitializationPriorityBus is a InitializationPriority of type Bus.
	// For communication buses like i2c/spi
	InitializationPriorityBus InitializationPriority = iota
	// InitializationPriorityIo is a InitializationPriority of type Io.
	// For components that represent GPIO pins like PCF8573
	InitializationPriorityIo
	// InitializationPriorityHardware is a InitializationPriority of type Hardware.
	// For components that deal with hardware and are very important like GPIO switch
	InitializationPriorityHardware
	// InitializationPriorityData is a InitializationPriority of type Data.
	// For components that import data from directly connected sensors like DHT.
	InitializationPriorityData
	// InitializationPriorityProcessor is a InitializationPriority of type Processor.
	// For components that use data from sensors like displays
	InitializationPriorityProcessor
	// InitializationPriorityBluetooth is a InitializationPriority of type Bluetooth.
	InitializationPriorityBluetooth
	// InitializationPriorityAfterBluetooth is a InitializationPriority of type After_bluetooth.
	InitializationPriorityAfterBluetooth
	// InitializationPriorityWifi is a InitializationPriority of type Wifi.
	InitializationPriorityWifi
	// InitializationPriorityEthernet is a InitializationPriority of type Ethernet.
	InitializationPriorityEthernet
	// InitializationPriorityBeforeConnection is a InitializationPriority of type Before_connection.
	// For components that should be initialized after WiFi and before API is connected.
	InitializationPriorityBeforeConnection
	// InitializationPriorityAfterWifi is a InitializationPriority of type After_wifi.
	// For components that should be initialized after WiFi is connected.
	InitializationPriorityAfterWifi
	// InitializationPriorityAfterConnection is a InitializationPriority of type After_connection.
	// For components that should be initialized after a data connection (API/MQTT) is connected.
	InitializationPriorityAfterConnection
	// InitializationPriorityLate is a InitializationPriority of type Late.
	// For components that should be initialized at the very end of the setup process.
	InitializationPriorityLate
)

var ErrInvalidInitializationPriority = errors.New("not a valid InitializationPriority")

const _InitializationPriorityName = "busiohardwaredataprocessorbluetoothafter_bluetoothwifiethernetbefore_connectionafter_wifiafter_connectionlate"

var _InitializationPriorityMap = map[InitializationPriority]string{
	InitializationPriorityBus:              _InitializationPriorityName[0:3],
	InitializationPriorityIo:               _InitializationPriorityName[3:5],
	InitializationPriorityHardware:         _InitializationPriorityName[5:13],
	InitializationPriorityData:             _InitializationPriorityName[13:17],
	InitializationPriorityProcessor:        _InitializationPriorityName[17:26],
	InitializationPriorityBluetooth:        _InitializationPriorityName[26:35],
	InitializationPriorityAfterBluetooth:   _InitializationPriorityName[35:50],
	InitializationPriorityWifi:             _InitializationPriorityName[50:54],
	InitializationPriorityEthernet:         _InitializationPriorityName[54:62],
	InitializationPriorityBeforeConnection: _InitializationPriorityName[62:79],
	InitializationPriorityAfterWifi:        _InitializationPriorityName[79:89],
	InitializationPriorityAfterConnection:  _InitializationPriorityName[89:105],
	InitializationPriorityLate:             _InitializationPriorityName[105:109],
}

// String implements the Stringer interface.
func (x InitializationPriority) String() string {
	if str, ok := _InitializationPriorityMap[x]; ok {
		return str
	}
	return fmt.Sprintf("InitializationPriority(%d)", x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x InitializationPriority) IsValid() bool {
	_, ok := _InitializationPriorityMap[x]
	return ok
}

var _InitializationPriorityValue = map[string]InitializationPriority{
	_InitializationPriorityName[0:3]:     InitializationPriorityBus,
	_InitializationPriorityName[3:5]:     InitializationPriorityIo,
	_InitializationPriorityName[5:13]:    InitializationPriorityHardware,
	_InitializationPriorityName[13:17]:   InitializationPriorityData,
	_InitializationPriorityName[17:26]:   InitializationPriorityProcessor,
	_InitializationPriorityName[26:35]:   InitializationPriorityBluetooth,
	_InitializationPriorityName[35:50]:   InitializationPriorityAfterBluetooth,
	_InitializationPriorityName[50:54]:   InitializationPriorityWifi,
	_InitializationPriorityName[54:62]:   InitializationPriorityEthernet,
	_InitializationPriorityName[62:79]:   InitializationPriorityBeforeConnection,
	_InitializationPriorityName[79:89]:   InitializationPriorityAfterWifi,
	_InitializationPriorityName[89:105]:  InitializationPriorityAfterConnection,
	_InitializationPriorityName[105:109]: InitializationPriorityLate,
}

// ParseInitializationPriority attempts to convert a string to a InitializationPriority.
func ParseInitializationPriority(name string) (InitializationPriority, error) {
	if x, ok := _InitializationPriorityValue[name]; ok {
		return x, nil
	}
	return InitializationPriority(0), fmt.Errorf("%s is %w", name, ErrInvalidInitializationPriority)
}

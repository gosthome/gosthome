// Code generated by go-enum DO NOT EDIT.
// Version:
// Revision:
// Build Date:
// Built By:

package entity

import (
	"errors"
	"fmt"
)

const (
	// EntityStatusOk is a EntityStatus of type Ok.
	EntityStatusOk EntityStatus = iota
	// EntityStatusWarning is a EntityStatus of type Warning.
	EntityStatusWarning
	// EntityStatusError is a EntityStatus of type Error.
	EntityStatusError
)

var ErrInvalidEntityStatus = errors.New("not a valid EntityStatus")

const _EntityStatusName = "okwarningerror"

var _EntityStatusMap = map[EntityStatus]string{
	EntityStatusOk:      _EntityStatusName[0:2],
	EntityStatusWarning: _EntityStatusName[2:9],
	EntityStatusError:   _EntityStatusName[9:14],
}

// String implements the Stringer interface.
func (x EntityStatus) String() string {
	if str, ok := _EntityStatusMap[x]; ok {
		return str
	}
	return fmt.Sprintf("EntityStatus(%d)", x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x EntityStatus) IsValid() bool {
	_, ok := _EntityStatusMap[x]
	return ok
}

var _EntityStatusValue = map[string]EntityStatus{
	_EntityStatusName[0:2]:  EntityStatusOk,
	_EntityStatusName[2:9]:  EntityStatusWarning,
	_EntityStatusName[9:14]: EntityStatusError,
}

// ParseEntityStatus attempts to convert a string to a EntityStatus.
func ParseEntityStatus(name string) (EntityStatus, error) {
	if x, ok := _EntityStatusValue[name]; ok {
		return x, nil
	}
	return EntityStatus(0), fmt.Errorf("%s is %w", name, ErrInvalidEntityStatus)
}

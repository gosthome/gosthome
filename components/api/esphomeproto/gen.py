import os
from importlib.metadata import version
import aioesphomeapi
import requests
from subprocess import check_call

aioesphomeapi_version = version("aioesphomeapi")
esphome_version = version("esphome")

for file in ("api.proto", "api_options.proto"):
    rsp = requests.get(
        f"https://github.com/esphome/aioesphomeapi/raw/v{aioesphomeapi_version}/aioesphomeapi/{file}")
    rsp.raise_for_status()
    with open(file, "wb") as f:
        f.write(rsp.content)


check_call(
    args=[
        "protoc",
        "--go_out=.",
        "--go_opt=paths=source_relative",
        "--go_opt=Mapi.proto=github.com/gosthome/gosthome/components/api/esphomeproto",
        "--go_opt=Mapi_options.proto=github.com/gosthome/gosthome/components/api/esphomeproto",
        "api.proto",
        "api_options.proto"
    ]
)

impls = []
conversions = []
for k, v in aioesphomeapi.core.MESSAGE_TYPE_TO_PROTO.items():
    isRq = v.DESCRIPTOR.GetOptions(
    ).Extensions[aioesphomeapi.api_options_pb2.source]
    impls.append(f"""
const MessageType{v.__name__} MessageType = {k}
func (x *{v.__name__}) EsphomeMessageType() MessageType {{ return MessageType{v.__name__} }}
func (x *{v.__name__}) EsphomeSource() APISourceType {{ return APISourceType({isRq}) }}

""")

    conversions.append(
        f"MessageType{v.__name__}: messageFactory[{v.__name__}](),\n")


with open(os.environ["GOFILE"], "w", encoding="utf-8") as f:
    f.write(f"""
// Code generated by gen.py. DO NOT EDIT.
package esphomeproto

//go:generate ./testdata/setup.sh gen.py

const (
\tAIOESPHOMEAPI_VERSION = \"{aioesphomeapi_version}\"
\tESPHOME_VERSION = \"{esphome_version}\"
)

type MessageType int

var MessageTypeToType = map[MessageType]MessageFactory{{
""")
    f.writelines(conversions)
    f.write("}")
    f.writelines(impls)

check_call(["gofumpt", "-w", "-extra", os.environ["GOFILE"]])
